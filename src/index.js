import express from 'express';
import { config } from 'dotenv';
import { Telegraf, session } from 'telegraf';
import cron from 'node-cron';

import getMainMenu from './keyboards.js';
import {
  chunkArray,
  isParticipant,
  pushUserToColl,
  sendMessage,
} from './utils.js';

config();
const app = express();
const bot = new Telegraf(process.env.BOT_TOKEN);

/**
 * –í —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è —á–∏—Å–ª–æ-–¥–µ–ª–∏—Ç–µ–ª—å –≥—Ä—É–ø–ø
 * (–æ–±—â–µ–µ –∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ –¥–µ–ª–∏—Ç–µ–ª—å)
 */
bot.context.state = {
  membersInGroup: 8,
};

/**
 * –ë–î –≤ –≤–∏–¥–µ –ø–ª–æ—Å–∫–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤, –≥–¥–µ
 * –∫–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ —Å–≤–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
bot.context.db = [];

// –û–±—ä–µ–∫—Ç —Å —à–∞–±–ª–æ–Ω–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
const messages = {
  greetingMessage: '–ù–∞ —á–∞—Å–∞—Ö 10:00, —Å–∫–æ—Ä–µ–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è!',
  lunchMessage: '–ì—Ä—É–ø–ø–∞:\n\n',
};

// –¢–∞–π–º–µ—Ä –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
let sortIntervId;

bot.use(session());

/**
 * –í 10:00 —Å –ü–ù-–ü–¢ –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º,
 * –∫—Ç–æ —Ö–æ—Ç—å —Ä–∞–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
 */
cron.schedule('0 10 * * 0-5', () => sendMessage(bot, messages.greetingMessage));

/**
 * –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å
 * –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π, –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –º–µ–Ω—é
 */
bot.start((ctx) => {
  ctx.sendMessage(
    '–î–ª—è –≤—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å',
    {
      reply_markup: {
        force_reply: true,
        input_field_placeholder: '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å',
      },
    },
  ).then(() => {
    bot.hears(process.env.AUTH_PASS, (context) => context.replyWithHTML(
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Kitchen bot</b>!\n\n'
    + '–ó–¥–µ—Å—å –º—ã —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –æ–±–µ–¥–æ–≤\n\n'
    + '–ù–∞—à–∞ —Ü–µ–ª—å - <b><i>—Å–±–ª–∏–∑–∏—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞</i></b> –∑–∞ –æ–¥–Ω–∏–º —Å—Ç–æ–ª–æ–º! üë®‚Äçüíºü•óüë©‚Äçüíº',
      getMainMenu(),
      /**
       * –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π.
       * –≠—Ç–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
       * –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –Ω–µ–ø–æ–ª–∞–¥–∫–∞—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
       */
      pushUserToColl(ctx),
    ));
  });
});

/**
 * –ö–æ–º–º–∞–Ω–¥–∞ '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å  üôãüèº‚Äç‚ôÇÔ∏è' –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
 * –µ—Å–ª–∏ –≤—ã —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
bot.hears('–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å  üôãüèº‚Äç‚ôÇÔ∏è', (ctx) => {
  const { from } = ctx.message;

  // –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
  sortIntervId = setInterval(() => {
    bot.context.db.sort(() => Math.random() - 0.5);
    // console.log(bot.context.db);
  }, 60000);

  if (isParticipant(bot.context.db, from)) {
    ctx.reply('–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ!');
  } else {
    bot.context.db.push(from);

    ctx.replyWithHTML(
      '–ù–∞—à –±–æ—Ç –ø–æ–¥–±–µ—Ä—ë—Ç –≤–∞–º –∫–æ–º–ø–∞–Ω–∏—é –Ω–∞ –æ–±–µ–¥.\n\n'
      + '<b><i>–ü—Ä–æ—è–≤–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É, –æ–±—â–∞–π—Ç–µ—Å—å –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ–º—ã. –û–±—Å—É–¥–∏—Ç–µ –≤–∞—à–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∏–ª–∏ —ç–º–æ—Ü–∏–∏!</i></b>      üíÅ‚Äç‚ôÇÔ∏èüí¨   üôã‚Äç‚ôÄÔ∏è ü§∑üôçüèª\n\n'
      + '–ó–∞ —á–∞—Å –¥–æ –æ–±–µ–¥–∞ –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ!',
    );
  }
});

/**
 * –í 11:00 —Å –ü–ù-–ü–¢ –±–æ—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –≥—Ä—É–ø–ø—ã –∏–∑ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 * –∏ –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö
 */
cron.schedule('0 11 * * 0-5', () => {
  const { membersInGroup } = bot.context.state;
  const chunkedGroups = chunkArray(bot.context.db, membersInGroup);

  clearInterval(sortIntervId);

  chunkedGroups.forEach((group) => {
    const participants = group.map((person) => [person.first_name, person.last_name]);
    const list = participants.map((person) => person.join(' ')).join('\n');

    sendMessage(bot, `${messages.lunchMessage}${list}`);
  });
});

/**
 * –ù–∞ –∫–æ–º–º–∞–Ω–¥—É '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤  üë©‚Äçüíºüë®‚Äçüíºüßëüèª‚Äçüíº' –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 * –æ —Ç–µ–∫—É—â–µ–º –∫–æ–ª-–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞
 */
bot.hears('–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤  üë©‚Äçüíºüë®‚Äçüíºüßëüèª‚Äçüíº', (ctx) => {
  const { db } = bot.context;

  if (db.length === 0) {
    ctx.reply('–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.\n–°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º!');
  } else {
    const participants = bot.context.db.map((person) => [person.first_name, person.last_name]);
    const list = participants.map((person) => person.join(' ')).join('\n');

    ctx.reply(list);
  }
});

/**
 * –ù–∞ –∫–æ–º–º–∞–Ω–¥—É '–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ  üßÆ' –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 * –æ —Ç–µ–∫—É—â–µ–º –∫–æ–ª-–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞
 *
 * (—É–¥–æ–±–Ω–æ –¥–ª—è –ø–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–∞ –∫–∞–∫–æ–µ –∫–æ–ª-–≤–æ –ª—é–¥–µ–π –≥–æ—Ç–æ–≤–∏—Ç—å)
 */
bot.hears('–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ  üßÆ', (ctx) => {
  const { db } = bot.context;
  const { length } = db;

  ctx.reply(`–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π: ${length} —á–µ–ª.`);
});

/**
 * –ö–æ–º–º–∞–Ω–¥–∞ '–ù–µ –ø–æ–π–¥—É  üö´' —É–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
 *
 * (—Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –Ω–∞ —Ç–æ—Ç —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–µ –ø–æ–π–¥—ë—Ç –Ω–∞ –æ–±–µ–¥,
 * –Ω–æ —Ä–∞–Ω–µ–µ –≤–≤—ë–ª –∫–æ–º–º–∞–Ω–¥—É '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å  üôãüèº‚Äç‚ôÇÔ∏è')
 */
bot.hears('–ù–µ –ø–æ–π–¥—É  üö´', (ctx) => {
  const { from } = ctx.message;
  const { db } = ctx;
  const personId = ctx.update.message.from.id;

  if (!isParticipant(db, from)) {
    ctx.reply('–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–∞—Ö!');
  } else {
    const filteredDatabase = db.filter((person) => person.id !== personId);
    bot.context.db = filteredDatabase;

    ctx.reply('–í—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –≥—Ä—É–ø–ø!');
  }
});

/**
 * –í 14:00 —Å –ü–ù-–ü–¢ –±–æ—Ç –æ–±–Ω—É–ª—è–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 * –í–ù–ò–ú–ê–ù–ò–ï! –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∑–∞–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–∞ –ø—É—Å—Ç—É—é
 */
cron.schedule('0 14 * * 0-5', () => {
  const emptyArray = [];
  bot.context.db = emptyArray;
});

bot.catch((err, ctx) => {
  console.log(`Ooops, encountered an error for ${ctx.updateType}`, err);
});

bot.launch();

app.listen(process.env.PORT);
